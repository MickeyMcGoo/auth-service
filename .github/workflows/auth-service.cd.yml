name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch: {}

jobs:
  deploy:
    name: Deploy to Minikube
    runs-on: self-hosted  # âœ… Uses your self-hosted runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Convert Repository Name to Lowercase
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Ensure Minikube is Running
        run: |
          if ! minikube status | grep -q "Running"; then
            echo "Starting Minikube..."
            minikube start --cpus 4 --memory 8192
          else
            echo "Minikube is already running."
          fi

      - name: Set Minikube Docker Daemon
        run: eval $(minikube docker-env)

      - name: Pull Latest Image from GHCR
        run: docker pull ghcr.io/${{ env.REPO_NAME }}/auth-service:latest

      - name: Apply Kubernetes Deployment (Ensure File Exists)
        run: |
          if [ ! -f k8s-deployment.yml ]; then
            echo "ERROR: k8s-deployment.yml not found!"
            exit 1
          fi
          kubectl apply -f k8s-deployment.yml

      - name: Wait for Deployment to Complete
        run: kubectl rollout status deployment/auth-service

      - name: Ensure No Existing Minikube Tunnel is Running
        run: |
          # Check if a tunnel is already running and kill it
          TUNNEL_PID=$(pgrep -f "minikube tunnel" || true)
          if [ -n "$TUNNEL_PID" ]; then
            echo "Existing tunnel found. Killing process with PID $TUNNEL_PID"
            kill -9 $TUNNEL_PID
          else
            echo "No existing tunnel found. Proceeding with starting a new one."
          fi

      - name: Start Minikube Tunnel in Background
        run: |
          nohup minikube tunnel &  # Run the tunnel in the background
          disown

      - name: Get Minikube Service URL
        run: |
          SERVICE_URL=$(minikube service auth-service --url)
          echo "Auth Service is available at: $SERVICE_URL"
